import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray5001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          shadowColor: appTheme.deepOrange80019,
          elevation: 10,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 17.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray400,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray80001,
          fontSize: 24.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray80001,
          fontSize: 16.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFF774C),
    primaryContainer: Color(0XFF323232),
    secondaryContainer: Color(0XFFF5A52E),

    // Error colors
    errorContainer: Color(0X75000000),
    onError: Color(0XFF9F9F9F),

    // On colors(text colors)
    onPrimary: Color(0X0C021F2C),
    onPrimaryContainer: Color(0XA2FFFFFF),
    onSecondaryContainer: Color(0XFF1B1B1B),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Blue
  Color get blue10019 => Color(0X19C1DAF0);
  Color get blue10087 => Color(0X87C1D9F0);
  Color get blue500 => Color(0XFF1DA1F2);
  Color get blue900 => Color(0XFF1434CB);

  // BlueGray
  Color get blueGray100 => Color(0XFFD6D6D6);
  Color get blueGray400 => Color(0XFF878787);

  // Cyan
  Color get cyanA700 => Color(0XFF00AED6);

  // DeepOrange
  Color get deepOrange10019 => Color(0X19F0CCC1);
  Color get deepOrange10087 => Color(0X87F0C9C1);
  Color get deepOrange50 => Color(0XFFFBE6E6);
  Color get deepOrange80019 => Color(0X19C94210);
  Color get deepOrangeA400 => Color(0XFFFA4A0C);

  // DeepPurple
  Color get deepPurple300 => Color(0XFF9268DD);
  Color get deepPurple700 => Color(0XFF4739AF);

  // Gray
  Color get gray100 => Color(0XFFF4F1F1);
  Color get gray10001 => Color(0XFFF6F6F9);
  Color get gray10002 => Color(0XFFF5F5F8);
  Color get gray200 => Color(0XFFF4F0F0);
  Color get gray300 => Color(0XFFDEE2E5);
  Color get gray30001 => Color(0XFFE4E2E1);
  Color get gray30002 => Color(0XFFE3E2E1);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray50 => Color(0XFFF7FBFF);
  Color get gray500 => Color(0XFFA9ABAE);
  Color get gray5001 => Color(0XFFF8FBFF);
  Color get gray60033 => Color(0X33966E56);
  Color get gray800 => Color(0XFF534C4C);
  Color get gray80001 => Color(0XFF3C3C3C);
  Color get gray900 => Color(0XFF130F26);
  Color get gray90001 => Color(0XFF120E26);

  // Grayc
  Color get gray5000c => Color(0X0CAAAAAA);

  // Green
  Color get green50 => Color(0XFFD9F9E4);
  Color get green500 => Color(0XFF3DC032);
  Color get green800 => Color(0XFF117835);
  Color get greenA700 => Color(0XFF21D934);

  // LightGreen
  Color get lightGreen30033 => Color(0X33A8E78A);

  // Lime
  Color get lime10019 => Color(0X19F0E3C1);

  // Purple
  Color get purple900 => Color(0XFF4B2489);

  // Red
  Color get red600 => Color(0XFFE82529);
  Color get red700 => Color(0XFFD92121);
  Color get redA200 => Color(0XFFFE554A);

  // Yellow
  Color get yellow900 => Color(0XFFF9881F);
  Color get yellow90001 => Color(0XFFF9871F);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
